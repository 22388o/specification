# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, sCrypt Inc
# This file is distributed under the same license as the sCrypt package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# qtom zheng <zhfnjust@qq.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: sCrypt\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-29 09:04+0800\n"
"PO-Revision-Date: 2021-10-07 06:10+0000\n"
"Last-Translator: qtom zheng <zhfnjust@qq.com>, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/scrypt-1/teams/121283/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../functions.rst:3 4967b18665594bca8fedc2a476c44ad5
msgid "Functions"
msgstr "函数"

#: ../../functions.rst:6 da715ebc4fe541af805d1e08c6d2a5e4
msgid "User-Defined Functions"
msgstr "用户自定义函数"

#: ../../functions.rst:7 a5219c8fafe74a9796e2cbd0387cf130
msgid ""
"sCrypt enables developers to define their own functions as exemplified "
"below:"
msgstr "sCrypt允许开发者定义自己的函数，如下所示："

#: ../../functions.rst:15 b62f05e96f4b4c62b3cb51a80968c94d
msgid ""
"They are only visible within the contract, similar to ``private`` functions "
"in Solidity."
msgstr "这些函数只在合约内可见，类似于 Solidity 中的 ``private`` 函数。"

#: ../../functions.rst:18 57f7bb5d1d9f4496bcaefa0938c12280
msgid "public function"
msgstr "公共函数"

#: ../../functions.rst:19 2ca90478319242fc989edef6de030ded
msgid ""
"A public function returns ``true`` if it runs to completion and ``false`` "
"otherwise. It does not have return type and ``return`` parts, as they are "
"included implicitly. In other words,"
msgstr ""
"如果公共函数运行完成，则返回 ``true``，否则返回 ```false``。它没有返回类型和 ``返回`` 部分，返回语句是是隐式包含的。换句话说，"

#: ../../functions.rst:28 c26dfdbca01a4baa8e376e2160dbc2d9
msgid "is functionally equivalent to"
msgstr "在功能上等同于"

#: ../../functions.rst:38 1e27239108354345bc88abef0f130374
msgid "static function and property"
msgstr "静态函数和静态属性"

#: ../../functions.rst:39 d967468bc56a424eb32a26550d3aff01
msgid ""
"A static property/function can be referenced with contract name as prefix "
"without an instantiated contract, similar to a static function/property in "
"Javascript or C++. A static property/function can also be referenced without"
" the contract prefix, but only in the contract it is defined in."
msgstr ""
"可以通过合约名来直接引用静态函数/方法，而不必创建合约实例。类似于 Javascript 或 C++ "
"中的静态函数/属性。在定义它的合约中，静态属性/函数也可以在没有合约前缀的情况下被引用。"

#: ../../functions.rst:68 0a2c7977c0764e79aa523909df84c296
msgid "``return``"
msgstr "``return`` 语句"

#: ../../functions.rst:69 3e1efc037760406b8ed3efc6e7f83c91
msgid ""
"Due to the lack of native ``return`` semantics support in script, a function"
" currently must end with a ``return`` statement and it is the only valid "
"place for a ``return`` statement. This requirement may be relaxed in the "
"future. This is usually not a problem since it can be circumvented as "
"follows:"
msgstr ""
"由于比特币脚本缺乏对 ``return`` 语义的支持，所以函数必须以 ``return`` 语句结尾，并且 ``return`` "
"语句只能放在函数末尾，不能放在其他位置。将来可能会放松这个限制。一般来说这不是问题，可以用如下方式避免在其他位置返回："

#: ../../functions.rst:82 7f9f5953d28c48c19bff546f450da9d7
msgid "can be rewritten as"
msgstr "可以改写为"

#: ../../functions.rst:98 5b1e31466c6349958a1a538db1282921
msgid "Recursion"
msgstr "递归"

#: ../../functions.rst:99 ed4cb9d5121e40779c37e9ebfcdd79d2
msgid ""
"Recursion is disallowed. A function cannot call itself in its body, either "
"directly or indirectly."
msgstr "不允许递归。函数不能直接或间接地在其主体中调用自身。"

#: ../../functions.rst:103 825b3aa64ac748a5aa3f2f6b52535442
msgid "Library Functions"
msgstr "库函数"

#: ../../functions.rst:104 5c14eb23057143ca8c001c0f5c08e58a
msgid "The following functions come with sCrypt and are available globally."
msgstr "sCrypt实现了如下库函数，在全局可见。"

#: ../../functions.rst:107 ea6a1a4a40c644fb866c96ee3dc62fef
msgid "Math"
msgstr "数学"

#: ../../functions.rst:108 44d17146f3b146df920955d83d53d89e
msgid "``int abs(int a)``"
msgstr "``int abs(int a)``"

#: ../../functions.rst:109 7cdc79f251c14a6f939c581fe4c61777
msgid "``int min(int a, int b)``"
msgstr "``int min(int a, int b)``"

#: ../../functions.rst:110 d143c412748e4e3c96d43abdc7ae37c0
msgid "``int max(int a, int b)``"
msgstr "``int max(int a, int b)``"

#: ../../functions.rst:111 372781b7bceb4848bed7c27367a8fe2e
msgid "``bool within(int x, int min, int max)``"
msgstr "``bool within(int x, int min, int max)``"

#: ../../functions.rst:114 1810eecba0934776b0a024d81e9e4056
msgid "Hashing"
msgstr "哈希"

#: ../../functions.rst:115 a1f85081bff9443f90575c8578b12d9e
msgid "``Ripemd160 ripemd160(bytes b)``"
msgstr "``Ripemd160 ripemd160(bytes b)``"

#: ../../functions.rst:116 0c711ded635647d5b2e50e40a91454ab
msgid "``Sha1 sha1(bytes b)``"
msgstr "``Sha1 sha1(bytes b)``"

#: ../../functions.rst:117 cd45b702a3144b22b87818fc3f55352b
msgid "``Sha256 sha256(bytes b)``"
msgstr "``Sha256 sha256(bytes b)``"

#: ../../functions.rst:118 beb559113c2e498cab22c9c595a8fe70
msgid "``Ripemd160 hash160(bytes b)``"
msgstr "``Ripemd160 hash160(bytes b)``"

#: ../../functions.rst:120 6138aac8c24a4bdea77b2fb145bf3ea2
msgid "ripemd160(sha256(b))"
msgstr "ripemd160(sha256(b))"

#: ../../functions.rst:122 d61bed58810e4cada7726a14d4d9c9f8
msgid "``Sha256 hash256(bytes b)``"
msgstr "``Sha256 hash256(bytes b)``"

#: ../../functions.rst:124 7255cd1c095046e5b3986f856913b1bf
msgid "sha256(sha256(b))"
msgstr "sha256(sha256(b))"

#: ../../functions.rst:126 eb6b440e4ce54fabb86c988f6f94bc41
msgid "``Sha256 flattenSha256(T a)``"
msgstr "``Sha256 flattenSha256(T a)``"

#: ../../functions.rst:128 c4c4ff26ff5b4efdad3730be0149161f
msgid ""
"Returns Sha256 for the given argument a of any type. If ``T`` is a basic "
"type, like ``bool / int / bytes``, the return is the same as ``sha256(a)``. "
"If ``T`` is a composite type (i.e., array and struct), it concatenates all "
"the sha256 values for each flattened fields of a to form a joint bytes, and "
"then call ``sha256`` on it to get the final result."
msgstr ""
"为任何类型的给定参数 a 返回 Sha256。如果 ``T`` 是基本类型，如 ``bool / int / bytes`` ，则返回与 "
"``sha256(a)`` 相同。如果 ``T`` 是复合类型（即数组和结构体），它将 a 的每个展平字段的所有 sha256 "
"值连接起来形成一个联合字节，然后对其调用 ``sha256`` 以获得最终的结果。"

#: ../../functions.rst:133 d26ccde9d4134dcb9ba72a974a43694d
msgid "Signature Verification"
msgstr "签名验证"

#: ../../functions.rst:134 c9a36cc5acb542f58870230b579983a9
msgid "``bool checkSig(Sig sig, PubKey pk)``"
msgstr "``bool checkSig(Sig sig, PubKey pk)``"

#: ../../functions.rst:136 292bfaa33f0c439e969c19fd1f7eda59
msgid ""
"Returns true if the signature matches the public key. Returns false if the "
"signature is an empty byte array. Otherwise, the entire contract fails "
"immediately, due to the `NULLFAIL rule "
"<https://github.com/bitcoin/bips/blob/master/bip-0146.mediawiki#NULLFAIL>`_."
msgstr ""
"如果签名与公钥匹配，则返回 true。如果签名是空字节数组，则返回 false。否则，由于 `NULLFAIL 规则 "
"<https://github.com/bitcoin/bips/blob/master/bip-0146.mediawiki#NULLFAIL>`_，整个合约立即失败。"

#: ../../functions.rst:139 5b2af10debbe4e5086e9ba37303aba36
msgid "``bool checkMultiSig(Sig[M] sigs, PubKey[N] pks)``"
msgstr "``bool checkMultiSig(Sig[M] sigs, PubKey[N] pks)``"

#: ../../functions.rst:141 b730ad15950e45ffa9a16e6a705a9304
msgid ""
"Returns true if and only M signatures match M out of N public keys. M and N "
"can be any number as long as M <= N. Returns false if all signatures are an "
"empty byte array. Otherwise, the entire contract fails immediately."
msgstr ""
"如果有且仅有 M 个签名与 N 个公钥中的 M 个匹配，则返回 true。 M 和 N 可以是任意数字，只要 M <= "
"N。如果所有签名都是空字节数组，则返回 false。否则，整个合约立即失效。"

#: ../../functions.rst:146 992ee444778b4598bae4945b546dc49a
msgid "``bytes`` Operations"
msgstr "``bytes`` 操作"

#: ../../functions.rst:147 329d8472fb6c4be3a8f0d68bea31448f
msgid "Convert to and from ``int``"
msgstr "与 ``int`` 之间的转换"

#: ../../functions.rst:149 4071cc8384c346e68082421a455aea83
msgid ""
"``bytes`` can be converted to ``int`` using function ``unpack``. Little-"
"endian `sign-magnitude representation <https://www.tutorialspoint.com/sign-"
"magnitude-notation>`_ is used, where the most significant bit indicates the "
"sign (``0`` for positive, ``1`` for negative). ``int`` can be converted to "
"``bytes`` with ``pack``."
msgstr ""
"``bytes`` 可以使用函数 ``unpack`` 转换为 ``int`` 。使用采用小端格式的 `符号-值 表示法 "
"<https://www.tutorialspoint.com/sign-magnitude-notation>`_，其中最高有效位表示符号（ "
"``0`` 表示正， ``1`` 表示负）。 ``int`` 可以使用 ``pack`` 转换为 ``bytes``。"

#: ../../functions.rst:162 faabf0ccebdf4aa6bf760dcc1e2d7f2f
msgid "``bytes num2bin(int num, int size)``"
msgstr "``bytes num2bin(int num, int size)``"

#: ../../functions.rst:164 f55ed9c7457c4af5a4b51b06afc63a87
msgid ""
"Converts a number ``num`` into a byte array of certain size ``size``, "
"including the sign bit. It fails if the number cannot be accommodated."
msgstr "把数字 ``num`` 转换为字节数为 ``size`` 的字节数组，包括符号比特。如果字节数组无法容纳被转换的数字，则会转换失败。"

#: ../../functions.rst:166 21a663be96e74d528efd3abdce02f682
msgid "``len()`` Returns the length."
msgstr "``len()`` 返回长度。"

#: ../../functions.rst:173 3f086c05c87042358727b0015d4d258e
msgid ""
"**Slicing Opeartor** - ``b[start:end]`` returns subarray of ``b`` from index"
" ``start`` (inclusive) to ``end`` (exclusive). ``start`` is ``0`` if "
"omitted, ``end`` is length of array if omitted."
msgstr ""
"**切片操作符** - ``b[start:end]`` 返回 ``b`` 的子数组，从索引 ``start`` （包含）到 ``end`` "
"（不包含）。 ``start`` 如果省略则为 ``0`` ， ``end`` 如果省略则为数组的长度。"

#: ../../functions.rst:183 c3c44a55274c4528ab69b283a18baf7b
msgid "**Concatenation**"
msgstr "**拼接**"

#: ../../functions.rst:189 e0a07f5a4b564b548969810852fe5b37
msgid "``reverseBytes(bytes b, static const int size)``"
msgstr "``reverseBytes(bytes b, static const int size)``"

#: ../../functions.rst:191 0ed5eb0c5c5744a8afe02c343b6d9ab2
msgid ""
"Returns reversed bytes of ``b``, which is of ``size`` bytes. Note ``size`` "
"must be a :ref:`compile time constant<ctc-label>`. It is often useful when "
"converting a number between little-endian and big-endian."
msgstr ""
"返回 ``b`` 的反向字节，``size`` 是 ``b`` 字节的大小。注意 ``size`` 必须是 :ref:`编译时常量 <ctc-"
"label>` 。在小端和 大端之间转换数字时，它通常很有用。"
