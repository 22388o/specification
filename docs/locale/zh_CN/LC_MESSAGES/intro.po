# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, sCrypt Inc
# This file is distributed under the same license as the sCrypt package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# qtom zheng <zhfnjust@qq.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: sCrypt\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-08 12:13+0800\n"
"PO-Revision-Date: 2021-10-07 06:10+0000\n"
"Last-Translator: qtom zheng <zhfnjust@qq.com>, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/scrypt-1/teams/121283/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../intro.rst:3 475d64f07ad34345857827c371041892
msgid "A Simple Smart Contract"
msgstr "一个简单的智能合约示例"

#: ../../intro.rst:5 46612efc903b42d7af5a9f8c4b8a84f1
msgid ""
"Contract in sCrypt is conceptually similar to class in Object Oriented "
"Programming. Each contract provides a template for a certain type of "
"contracts (e.g., P2PHK or multisig), which can be instantiated into concrete"
" runnable contract objects."
msgstr ""
"sCrypt 中的合约在概念上类似于面向对象编程中的类。每个合约都为某种类型的合约（例如 P2PHK 或 "
"multisig）提供了一个模板，可以将其实例化为具体的可运行合约对象。"

#: ../../intro.rst:23 0ec481f9fa4747debaab50864f5cd3cf
msgid "Constructor"
msgstr "构造函数（constructor）"

#: ../../intro.rst:24 8e8468cb12b94f67aa5ae439fd2ee2c0
msgid ""
"Each contract has at most one constructor. It is where contract member "
"variables are initialized. For example, it can initialize the public key "
"hash of a P2PHK contract, or the hash of a secret in a hash puzzle contract."
msgstr ""
"每个合约最多只能有一个构造函数。用于初始化合约的成员变量。例如，初始化P2PKH合约的公钥哈希，或者哈希谜题（hash puzzle）合约的哈希秘密。"

#: ../../intro.rst:28 63fd20c05e054cae90f1567642e4d92b
msgid "Default Constructor"
msgstr "默认构造函数"

#: ../../intro.rst:29 4ee8d3bbea36440aab6419bbc9b677f8
msgid ""
"When no constructor is provided, the compiler will automatically generate a "
"default constructor that initializes every member variable in the order they"
" are declared. For example,"
msgstr "当没有提供构造函数时，编译器将自动生成一个默认构造函数，它按照声明的顺序初始化每个成员变量。例如，"

#: ../../intro.rst:42 b8f2eb9bc7b343609827016d3c217efc
msgid "is functionally equivalent to"
msgstr "在功能上等同于"

#: ../../intro.rst:61 7351acd9292c459cb17da2e5a1e2791b
msgid "require()"
msgstr "require() 语句"

#: ../../intro.rst:62 2b57805c2c9042a2bf452714f10124d9
msgid ""
"The ``require()`` function specifies terms/conditions of a contract. It "
"consumes a boolean condition. If the condition is not met, the contract will"
" abort execution and fail. Otherwise, the execution will resume."
msgstr ""
"``require()`` 函数指定合约的限制条款/条件。它的参数是一个布尔条件表达式。如果条件表达式的值为假，合约将终止执行并失败。否则，将继续执行。"

#: ../../intro.rst:66 85f3f77022a841d09b4bd9ff13e5e414
msgid "Public Function"
msgstr "公共函数"

#: ../../intro.rst:67 2a83b6f28aa24e48baa548e31e8dbaea
msgid ""
"Each contract has at least one public function. It is denoted with the "
"``public`` keyword and does not return any value. The function body "
"corresponds to locking script and its arguments unlocking script. It is "
"visible outside the contract and acts as the entry point into the contract "
"(like ``main`` in ``C`` and ``Java``)."
msgstr ""
"每个合约至少有一个公共函数。它用 ``public`` "
"关键字表示并且不返回任何值。函数体对应锁定脚本，函数参数对应解锁脚本。公共函数在合约之外是可见的，并作为合约的入口点（就像 C 和 Java 中的 "
"main 一样）。"

#: ../../intro.rst:70 67509dbfda234d08b3668784979f9c94
msgid ""
"A public function must end with a ``require()`` call. ``require()`` can also"
" appear in other parts of a public function. A contract can only be "
"fulfilled and succeed when its called public function runs to completion "
"without violating any conditions in ``require()``. In the above example, "
"only ``unlockingScript`` (i.e., ``y``) equal to ``this.x`` can fulfill the "
"contract."
msgstr ""
"公有函数的最后一个语句必须是 ``require()`` 。 ``require()`` "
"也可以出现在公有函数的其他地方。只有在被调用的公有函数执行完毕，并且所有 ``require()`` "
"中的条件全部被满足时，合约才算执行成功。在上面的例子中，只有 ``unlockingScript`` （即 ``y`` ）等于 ``this.x`` "
"时合约才能执行成功。"

#: ../../intro.rst:73 c0d8a1cc3df547b1bc9c54d90eebac21
msgid ""
"A public function can be regarded as a mathematical boolean function. ``f`` "
"is the function body and ``x`` the function arguments. A contract call "
"succeeds if and only if ``f(x)`` returns true."
msgstr "公共函数可以被视为布尔数学函数。 ``f`` 是函数体，``x`` 是函数参数。当且仅当 f(x) 返回 true 时，合约调用才会成功。"

#: ../../intro.rstNone ce8dec4931c64aaf8288e6b456442217
msgid "sCrypt logo"
msgstr "sCrypt logo"

#: ../../intro.rst:82 9a50be64afbc4e2cb19d4715b88acb47
msgid "Multiple Public Functions"
msgstr "多个公共函数"

#: ../../intro.rst:83 d8a98ac4b4e441d78e39bed4762922dd
msgid ""
"A contract can have multiple public functions, representing different ways "
"to fulfill a contract. Only one of the public functions can be called at a "
"time. In this case, the last operator of ``unlockingScript`` has to be the "
"index of the public function called, starting from ``0``. For example, if "
"public function ``larger`` is called, ``unlockingScript`` of ``y 2`` can "
"fulfill the contract below, in which ``2`` is the public function index."
msgstr "一个合约可以有多个公共函数，代表解锁合约的不同方式。一次只能调用一个公共函数。"
