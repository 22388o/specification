# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, sCrypt Inc
# This file is distributed under the same license as the sCrypt package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# qtom zheng <zhfnjust@qq.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: sCrypt\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-22 08:29+0800\n"
"PO-Revision-Date: 2021-10-07 06:10+0000\n"
"Last-Translator: qtom zheng <zhfnjust@qq.com>, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/scrypt-1/teams/121283/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../state.rst:3 c771bbbef0394f8a9a28c6554b7eb780
msgid "Stateful Contract"
msgstr "有状态合约"

#: ../../state.rst:5 47f4abe9250c43f78035bfee1477c854
msgid ""
"Bitcoin/sCrypt contract uses Unspent Transaction Output (UTXO) model: a "
"contract is inside a UTXO, dictating how the bitcoins in the UTXO can be "
"spent. When a UTXO is spent (i.e., an sCrypt contract public function is "
"called successfully), the contract is terminated. For a contract to keep "
"state and able to be called multiple times while carrying the mutable state,"
" these steps have to be followed."
msgstr ""
"比特币/sCrypt 合约使用未花费交易输出 (UTXO) 模型：合约位于 UTXO 内，决定如何使用 UTXO 中的比特币。当一个 UTXO "
"被花费（即成功调用 sCrypt 合约公共函数）时，合约终止。对于保持状态并能够在携带可变状态的同时被多次调用的合约，必须遵循以下这些步骤。"

#: ../../state.rst:10 0a63ec26cfe941fabef5c996a2fb2301
msgid "State Decorator"
msgstr "状态装饰器"

#: ../../state.rst:11 e33538f8c70d48a5b81dac82734d1cc9
msgid ""
"Declare any property that is part of the state with a decorator ``@state``. "
"The state property can be used the same way as a regular property."
msgstr "使用装饰器 ``@state`` 声明属于状态的任何属性。 状态属性可以像普通属性一样使用。"

#: ../../state.rst:26 ff89e8dde1e14d42ad02681b0bae7b78
msgid "Propagate the State"
msgstr "传播状态"

#: ../../state.rst:27 8fc2b39a16b04bd1a6adc782debdc58a
msgid ""
"A contract can keep state across chained transactions by storing it in the "
"locking script. In the following example, a contract goes from ``state0`` to"
" ``state1``, and then to ``state2``. Input in transaction 1 ``tx1`` is "
"spending UTXO in ``tx0``, and ``tx2`` spending ``tx1``."
msgstr ""
"合约可以通过将其状态存储在锁定脚本中来实现链式交易保持状态。在以下示例中，合约从 ``state0`` 到 ``state1``，然后到 "
"``state2``。交易 ``tx1`` 的输入花费了 在 ``tx0`` 中的 UTXO，而 ``tx2`` 花费了 ``tx1`` 的 UTXO。"

#: ../../state.rstNone ccc5a434c6e241a594c554ec13f11a88
msgid "keep state"
msgstr "保持状态"

#: ../../state.rst:36 6228b2299d874f6e8f459afc7e62a7c6
msgid ""
"When you are ready to pass the new state into the output[s] in the current "
"spending transaction, simply call a built-in function "
"``this.getStateScript()`` to get the locking script containing the latest "
"stateful properties. It is automatically generated for every stateful "
"contract, i.e., a contract that has at least one property decorated with "
"``@state``."
msgstr ""
"当准备好将新状态传递到当前花费UTXO的交易中的输出时，只需调用内置函数 ``this.getStateScript()``，     "
"即可获取包含最新状态的锁定脚本。编译器为每个有状态合约自动生成改函数，有状态合约至少有一个带有 ``@state`` 修饰的属性。"

#: ../../state.rst:40 d678b5926cc946649611f2039946796d
msgid ""
"Finally, use :ref:`OP_PUSH_TX<pushtx-label>` to ensure the output[s] "
"containing the state go into the current spending transaction. The following"
" is an example contract that records the number of times ``mutate()`` have "
"been called."
msgstr ""
"最后，使用 :ref:`OP_PUSH_TX <pushtx-label>` 来确保包含状态的输出进入当前支出交易。以下是一个示例合约，它记录了 "
"``mutate()`` 被调用的次数。"
